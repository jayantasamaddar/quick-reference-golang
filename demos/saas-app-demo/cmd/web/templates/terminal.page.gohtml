{{template "base" .}}

{{define "title"}}
    Virtual Terminal
{{end}}

{{define "content"}}
    <h2>Virtual Terminal</h2>
    <hr>
    <div class="alert alert-danger text-center d-none" id="card-messages"></div>
    <form name="charge-form" id="charge-form" class="d-block needs-validation charge-form" autocomplete="off" novalidate=""
        action="/payment-success" method="post">
        
        <div class="mb-3">
            <label for="amount" class="form-label">Amount</label>
            <input type="text" class="form-control" id="amount" name="amount" required="" autocomplete="amount-new">
        </div>

        <div class="mb-3">
            <label for="cardholder-name" class="form-label">Cardholder Name</label>
            <input type="text" class="form-control" id="cardholder-name" name="cardholder-name" required="" autocomplete="cardholder-name-new">
        </div>

        <div class="mb-3">
            <label for="cardholder-email" class="form-label">Cardholder Email</label>
            <input type="email" class="form-control" id="cardholder-email" name="cardholder-email" required="" autocomplete="cardholder-email-new">
        </div>

        <!-- Let Stripe Handle the Credit Card Information Block as below -->
        <div class="mb-3">
            <label for="card-element" class="form-label">Credit Card</label>
            <div class="form-control" id="card-element"></div>
            <div class="alert-danger text-center" id="card-error" role="alert"></div>
            <div class="alert-success text-center" id="card-success" role="alert"></div>
        </div>
        
        <hr>

        <a id="pay-button" class="btn btn-primary" href="javascript:void(0)" onClick="val()">Charge Card</a>
        <div id="processing-payment" class="text-center d-none">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>

        <!-- Keep track of data s-->
        <input type="hidden" name="payment-intent" id="payment-intent">
        <input type="hidden" name="payment-method" id="payment-method">
        <input type="hidden" name="payment-amount" id="payment-amount">
        <input type="hidden" name="payment-currency" id="payment-currency">
    </form>
{{end}}


{{define "js"}}
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        let card;
        // Initialize stripe variable with publishable key
        const key = '{{ index .StringMap "publishable_key" }}';
        const stripe = Stripe(key);

        const cardMessages = document.getElementById('card-messages')
        const payButton = document.getElementById("pay-button")
        const processing = document.getElementById("processing-payment")

        // Hide Payment Buttons
        function hidePayButton() {
            payButton.classList.add("d-none");
            processing.classList.remove("d-none")
        }

        // Show Payment Buttons
        function showPayButton() {
            payButton.classList.remove("d-none");
            processing.classList.add("d-none")
        }

        // Show the card messages
        function showCardError(msg) {
            cardMessages.classList.add("alert-danger");
            cardMessages.classList.remove("alert-success");
            cardMessages.classList.remove("d-none");
            cardMessages.textContent = msg;
        }

        function showCardSuccess() {
            cardMessages.classList.remove("alert-danger");
            cardMessages.classList.add("alert-success");
            cardMessages.classList.remove("d-none");
            cardMessages.textContent = "Transaction successful";
        }

        // Form validation
        function val() {
            const form = document.getElementById("charge-form")
            // Check validity using HTML5 checkValidity - https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/checkValidity
            if(form.checkValidity() === false) {
                this.event.preventDefault();
                this.event.stopPropagation();
                form.classList.add("was-validated");
                return;
            }
            form.classList.add('was-validated');
            hidePayButton();

            // Amount to be charged, converted into paisa/cents
            const amountToCharge = String(parseFloat(document.getElementById("amount").value) * 100)
            
            // Data to be sent to the backend
            const payload = {
                amount: amountToCharge,
                currency: "inr"
            }

            const requestOptions = {
                method: "post",
                headers: {
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(payload)
            }

            // Make a call to backend to get payment intent from Stripe
            fetch('{{ .API }}/api/payment-intent', requestOptions).then(response => response.text()).then(response => {
                let data;
                try {
                    data = JSON.parse(response);
                    console.log(data)
                    stripe.confirmCardPayment(data.client_secret, {
                        payment_method: {
                            card,
                            billing_details: {
                                name: document.getElementById("cardholder-name").value
                            }
                        }}).then(result => {
                            console.log(result)
                            if(result.error) {
                            // card declined or something went wrong
                            showCardError(result.error.message);
                            showPayButton();
                        } else if(result.paymentIntent) {
                            if(result.paymentIntent.status === "succeeded") {
                                // We have charged the card
                                document.getElementById("payment-method").value = result.paymentIntent.payment_method_types[0];
                                document.getElementById("payment-intent").value = result.paymentIntent.id;
                                document.getElementById("payment-amount").value = result.paymentIntent.amount;
                                document.getElementById("payment-currency").value = result.paymentIntent.currency
                                processing.classList.add("d-none");
                                showCardSuccess();

                                // Submit the form
                                document.getElementById("charge-form").submit()
                            }
                        }
                    })
                } catch (err) {
                    console.log(err);
                    showCardError("Invalid response from payment gateway");
                    showPayButton();
                }
            })
        }

        (function() {
            // create stripe & elements
            const elements = stripe.elements()
            // Override stripe base style with bootstrap
            const style = {
                base: {
                    fontSize: '16px',
                    lineHeight: '24px'
                }
            }

            // Create card entry
            card = elements.create('card', {
                style,
                hidePostalCode: true
            });
            console.log(card)
            // Mount the card in the div with id
            card.mount("#card-element");

            // Input validation - https://stripe.com/docs/js/element/input_validation
            card.on("change", function(event) {
                const errorEl = document.getElementById("card-error")
                if(event.error) {
                    // Show
                    // Remove bootstrap class and populate with text
                    errorEl.classList.remove('d-none');
                    errorEl.textContent = event.error.message;
                } else {
                    errorEl.classList.add('d-none');
                    errorEl.textContent = "";
                }
            })
        })();
    </script>
{{end}}